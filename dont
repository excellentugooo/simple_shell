int devNull = open("/dev/null", O_WRONLY);
        if (devNull != -1)
        {
            dup2(devNull, STDERR_FILENO);
            close(devNull);
        }


this is to remove error when you press enter

	else if (strcmp(av[0], "setenv") == 0)
            {
                if (av[1] == NULL || av[2] == NULL)
                {
                    writes("setenv: Invalid arguments\n", 1);
                }
                else
                {
                    if (setenv(av[1], av[2], 1) != 0)
                    {
                        writes("setenv: Failed to set environment variable\n", 2);
                    }
                }
            }

	else if (strcmp(av[0], "unsetenv") == 0)
            {
                if (av[1] == NULL)
                {
                    writes("unsetenv: Invalid argument\n", 1);
                }
                else
                {
                    if (unsetenv(av[1]) != 0)
                    {
                        writes("unsetenv: Failed to unset environment variable\n", 1);
                    }
                }
            }
            else
            {
                writes(": command not found\n", 1);
            }
        }

else if (strcmp(av[0], "cd") == 0)
            {
                char *dir = av[1];

                if (dir == NULL || strcmp(dir, "~") == 0)
                {
                    dir = getenv("HOME");
                }
                else if (strcmp(dir, "-") == 0)
                {
                    dir = getenv("OLDPWD");
                }

                char current_dir[1024];
                if (getcwd(current_dir, sizeof(current_dir)) == NULL)
                {
                    writes("cd: Failed to get current directory\n", 2);
                }
                else
		{
                    if (chdir(dir) != 0)
                    {
                        writes("cd: Directory change failed\n", 2);
                    }
                    else
                    {
                        setenv("OLDPWD", current_dir, 1);
                        setenv("PWD", getcwd(NULL, 0), 1);
                    }
                }
            }

 char *command;
        char *token = strtok(input, ";");
        while (token != NULL)
        {
		{
		every code enters into here 
		}
		token = strtok(NULL, ";");
  	}
a function for performing the exeve for the command is also inplemented among the else statement
void execute_command(char *command, char *env[])
{
    pid_t pid = fork();
    if (pid == 0)
    {
        char **args = tokenize(command, " \n");
        exec_ve(pid, command, args, env);
    }
    else if (pid < 0)
    {
        writes("Fork failed\n", 2);
    }
    else
    {
        waitpid(pid, NULL, 0);
    }
}
another thing i can try and do is tokenize then i store it in a while loop too


void executeCommand(char *command, char *env[]) {
    char *input = NULL;
    char *path = NULL;
    ssize_t rvalue = 0;
    size_t n = 0;

    rvalue = get_line(&input, &n, command);
    if (rvalue == -1)
        return;
    rmline(input);
    av = tokenize(input, " \n");
    path = find_path(input);
    if (path == NULL) {
        if (av == NULL || av[0] == NULL) {
            free(input);
            exit(0);
        }
        else if (str_cmp(av[0], "exit") == 0) {
            ex_it(av);
        }
        else if (str_cmp(av[0], "env") == 0) {
            envip(env);
        }
        else {
            writes(":command not found\n", 1);
        }
    }
    else {
        exec_ve(path, av, env);
    }
    free(input);
}

int main(__attribute__((unused)) int ac, char *av[], char *env[]) {
    char *input = NULL;
    ssize_t rvalue = 0;
    size_t n = 0;

    while (1) {
        writes("simpleshell$ ", 1);

        rvalue = get_line(&input, &n, stdin);
        if (rvalue == -1)
            return (-1);

        // Tokenize input by ;
        char *token;
        char *command = strtok(input, ";");
        while (command != NULL) {
            // Execute individual command
            executeCommand(command, env);

            // Move to the next command
            command = strtok(NULL, ";");
        }

        free(input);
    }
    return (0);
}

