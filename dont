int devNull = open("/dev/null", O_WRONLY);
        if (devNull != -1)
        {
            dup2(devNull, STDERR_FILENO);
            close(devNull);
        }


#include "main.h"
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <stdlib.h>

void exec_ve(char *path, char *av[], char *env[])
{
    pid_t value;
    value = fork();

    if (value == -1)
        exit(EXIT_FAILURE);
    else if (value == 0)
    {
        execve(path, av, env);

        perror("Error");
        free(av);
        exit(EXIT_FAILURE);
    }
    else
    {
        wait(NULL);
    }
}

int execute_cmd(char *av[], char *env[], char *cmd)
{
    char *path = NULL;

    av = tokenize(cmd, " \n");
    path = find_path(av[0]);
    if (path == NULL)
    {
        if (av == NULL || av[0] == NULL)
        {
            free(cmd);
            exit(0);
        }
        else if (str_cmp(av[0], "exit") == 0)
            ex_it(av);
        else if (str_cmp(av[0], "env") == 0)
            envip(env);
        else if (str_cmp(av[0], "setenv") == 0)
            set_env(av);
        else if (strcmp(av[0], "unsetenv") == 0)
            unset_env(av);
        else if (strcmp(av[0], "cd") == 0)
            cd(av);
        else
            writes(":command not found\n", 1);
    }
    else
    {
        exec_ve(path, av, env);
    }

    return 0;
}

int main(__attribute__((unused)) int ac, char *av[], char *env[])
{
    char *input = NULL;
    char *cmd = NULL;
    ssize_t rvalue = 0;
    size_t n = 0;
    int last_status = 0;
    int should_execute = 1;

    while (1)
    {
        writes("simpleshell$ ", 1);

        rvalue = get_line(&input, &n, stdin);
        if (rvalue == -1)
            return -1;
        rmline(input);
        rmspace(input);
        rmit(input);
        cmd = strtok(input, ";");
        while (cmd != NULL)
        {
            rmspace(cmd);

            if (should_execute)
            {
                if (execute_cmd(av, env, cmd) != 0)
                {
                    last_status = 1;
                    should_execute = 0;
                }
                else
                {
                    last_status = 0;
                }
            }

            if (strcmp(cmd, "&&") == 0)
                should_execute = (last_status == 0);
            else if (strcmp(cmd, "||") == 0)
                should_execute = (last_status != 0);
            else
                should_execute = 1;

            cmd = strtok(NULL, ";");
        }
    }
    free(input);
    return 0;
}

